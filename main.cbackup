#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <sys/types.h>
#include <unistd.h>
#include <wait.h>

#define true 1
#define false 0
#define bool int
#define BUFSIZE 1024

int process_status;
int bufsize = BUFSIZE;

const char* SPACE = " ";
const char* COLON = ":";

void print_prompt();
void execute_args(char** args);
char** split(char* input, const char* delim);
char* get_user_input(void);
int main();

void handle_builtins(char *const *args);

int main() {
    char* line;
    char** args;
    char** pathargs;
    do {
        print_prompt();
        line = get_user_input();
        args = split(line, SPACE);
        pathargs = split(getenv("PATH"), COLON);
        pid_t pid = fork();
        if(feof(stdin)){
            exit(0);
        }
        if(pid == 0){
            execvp(args[0], args);
            execute_args(args);
        }
        waitpid(pid, &process_status, 0);
        free(line);
        free(args);
    } while (!feof(stdin));
    free(pathargs);
    exit(0);
}

void print_prompt(){
    char tmpbuf[BUFSIZE];
    char *cwd = getcwd(tmpbuf, sizeof(tmpbuf));
    printf("%s - $ - ", cwd);
    fflush(stdout);
}

void execute_args(char** args){
    //handle_special_chars(args);
    handle_builtins(args);
}

void handle_builtins(char *const *args){
    if(strcmp(args[0], "cd") == 0){
        chdir(args[1]);
        return;
    }
}

char *get_user_input(void){
    char* input = malloc(sizeof(char) * 64);
    int i = 0;
    while(true){
        char c = (char)getchar();
        if(c == EOF || c == '\n'){
            return input;
        }
        input[i] = c;
        i++;
    }
}

char **split(char* input, const char* delim){
    char **array = malloc(bufsize * sizeof(char));
    char *word;
    word = strtok(input, delim);
    int i = 0;
    while(word != NULL){
        array[i++] = word;
        //printf("%s\n", word);
        word = strtok(NULL, delim);
    }
    array[i] = NULL;
    return array;
}

